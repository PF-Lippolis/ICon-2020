% AILog code
% Copyright Lippolis Pompeo Francesco 2020
% ailog: load 'prob_diabetes.ailog'.

% Rende le condizioni del paziente askable
askable has(I,C,P).

% Definiamo un albero decisionale per la predizione del diabete.
diabetes_decision_tree(bt(polyuria, 0.51, bt(gender_male, 0.77, bt(alopecia, 0.31, bt(age_over35, 0.82, bt(muscle_stiffness, 0.5, leaf(0), leaf(1)), bt(irritability, 0.11, leaf(1), leaf(0.67))), bt(delayed_healing, 0.87, leaf(1), leaf(0))), bt(polydipsia, 0.14, bt(irritability, 0.13, bt(partial_paresis, 0.12, bt(delayed_healing, 0.35, leaf(0), leaf(0.056)), bt(muscle_stiffness, 0.86, leaf(1), leaf(0))), bt(genital_thrush, 0.29, bt(age_over45, 0.58, leaf(0.4), leaf(0)), leaf(1))), bt(muscle_stiffness, 0.41, leaf(1), bt(irritability, 0.33, leaf(0), leaf(1))))), bt(polydipsia, 0.76, bt(delayed_healing, 0.53, leaf(1), bt(alopecia, 0.7, leaf(1), bt(itching, 0.84, leaf(1), bt(obesity, 0.44, leaf(0.33), leaf(0))))), leaf(1)))).

% Un individuo I ha una certa probabilità di avere il diabete se:
%	esiste un albero decisionale Z per la predizione del diabete e
%	la relazione has_diabetes(I,Z) ha quella probabilità ovvero:
%		quell'albero predice che l'individuo I ha il diabete con quella probabilità.
has_diabetes(I) <-
	diabetes_decision_tree(Z) &
	has_diabetes(I,Z).
	
% Un albero predice che l'individuo I ha il diabete con una certa probabilità se:
% 	L'albero è un nodo foglia che predice quella probabilità.
prob has_diabetes(I,leaf(P)): P.


% Un albero predice che l'individuo I ha il diabete con una certa probabilità se:
%	la condizione C indicata sulla foglia è vera e
% 	Il sottoalbero destro predice similmente che l'individuo I ha il diabete con quella probabilità.
has_diabetes(I,bt(C,P,_,T))<-
    has(I,C,P) &
    has_diabetes(I,T).

% Un albero predice che l'individuo I ha probabilità P di avere il diabete se:
%	la condizione C indicata sulla foglia è falsa e
%	il sottoalbero sinistro predice similmente che l'individuo I ha il diabete con quella probabilità.
has_diabetes(I,bt(C,P,F,_))<-
	~ has(I,C,P) &
	has_diabetes(I,F).

% se il valore di verità della condizione C per il paziente I non è stabilito dall'utente.
% esso sarà vero con una certa probabilità.
has(I,C,P)<-prob_has(I,C,P).
	
% In caso la condizione non sia stata osservata, essa sarà vera con probabilità P, altrimenti falsa.
prob prob_has(_,_,P): P.